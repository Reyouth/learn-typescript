(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{401:function(t,e,a){t.exports=a.p+"assets/img/huanchun.2d200578.jpg"},402:function(t,e,a){t.exports=a.p+"assets/img/qiangzhi1.f56e98aa.jpg"},403:function(t,e,a){t.exports=a.p+"assets/img/qiangzhi2.f6cf62d3.jpg"},404:function(t,e,a){t.exports=a.p+"assets/img/qiangzhi3.5bcb2c1c.jpg"},405:function(t,e,a){t.exports=a.p+"assets/img/xieshang1.69dc3d36.jpg"},406:function(t,e,a){t.exports=a.p+"assets/img/xieshang2.e2125679.jpg"},426:function(t,e,a){"use strict";a.r(e);var i=a(2),_=Object(i.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制"}},[t._v("#")]),t._v(" 缓存机制")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("浏览器发送请求前，根据请求头的expires和cache-control判断是否命中（包括是否过期）强缓存策略，如果命中，直接从缓存获取资源，并不会发送请求。如果没有命中，则进入下一步。")])]),t._v(" "),e("li",[e("p",[t._v("没有命中强缓存规则，浏览器会发送请求，根据请求头的last-modified和etag判断是否命中协商缓存，如果命中，直接从缓存获取资源。如果没有命中，则进入下一步。 3. 如果前两步都没有命中，则直接从服务端获取资源。")])])]),t._v(" "),e("p",[e("img",{attrs:{src:a(401),alt:"图片"}})]),t._v(" "),e("h3",{attrs:{id:"强缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存策略"}},[t._v("#")]),t._v(" 强缓存策略")]),t._v(" "),e("p",[t._v("不向服务器发送请求，直接从缓存中读取资源")]),t._v(" "),e("h4",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),e("p",[t._v("强制缓存就是在浏览器缓存中查找结果，然后按照缓存规则来决定是否使用该结果。")]),t._v(" "),e("ul",[e("li",[t._v("第一次请求，浏览器缓存不存在该结果的"),e("strong",[t._v("缓存结果与缓存标识")]),t._v("，直接向浏览器发送")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(402),alt:"图片"}})]),t._v(" "),e("ul",[e("li",[t._v("后续请求，浏览器缓存已经存在缓存标识与缓存结果，但是失效。则使用"),e("strong",[t._v("协商缓存")])])]),t._v(" "),e("p",[e("img",{attrs:{src:a(403),alt:"图片"}})]),t._v(" "),e("ul",[e("li",[t._v("后续请求，浏览器缓存存在缓存标识以及缓存结果，则直接返回该结果")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(404),alt:"图片"}})]),t._v(" "),e("p",[t._v("强制缓存的规则字段分别是"),e("code",[t._v("Expires")]),t._v("与"),e("code",[t._v("Cache-Control")]),t._v("\n后者比前者优先级高")]),t._v(" "),e("h4",{attrs:{id:"expires"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" Expires")]),t._v(" "),e("p",[t._v("意为缓存过期时间，来指定资源到期的时间，即"),e("code",[t._v("Expires=max_age+getTime")]),t._v("指的是服务器的具体时间点，所以是服务器响应消息的信息头字段。")]),t._v(" "),e("blockquote",[e("p",[t._v("受限于本地时间，更改本地时间可能造成缓存失效")])]),t._v(" "),e("h4",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-Control")]),t._v(" "),e("p",[t._v("一个控制网页缓存的规则，里面的值对应了规则：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("public:客户端与代理服务器缓存所有内容")])]),t._v(" "),e("li",[e("p",[t._v("private:仅客户端可缓存内容")])]),t._v(" "),e("li",[e("p",[t._v("默认取值no-cache:不使用强制缓存，也不使用协商缓存")])]),t._v(" "),e("li",[e("p",[t._v("max_age = xxx: 内容在xxx秒后失效")])])]),t._v(" "),e("blockquote",[e("p",[t._v("from disk cache和from memory cache")])]),t._v(" "),e("p",[t._v("开发的时候发现网络请求的Size会出现三种情况"),e("code",[t._v("from disk cache")]),t._v("(磁盘缓存)、"),e("code",[t._v("from memory cache")]),t._v("(内存缓存)、以及资源大小数值。")]),t._v(" "),e("p",[t._v("浏览器读取缓存的顺序为memory –> disk。")]),t._v(" "),e("h3",{attrs:{id:"协商缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存策略"}},[t._v("#")]),t._v(" 协商缓存策略")]),t._v(" "),e("p",[t._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，即询问服务器是否使用缓存还是向服务器请求消息。")]),t._v(" "),e("ul",[e("li",[t._v("协商缓存生效，返回304（该资源无更新） 和Not Modified")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(405),alt:"图片"}})]),t._v(" "),e("ul",[e("li",[t._v("协商缓存失效，返回200和请求结果，并把请求结果与缓存标识存到浏览器缓存中")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(406),alt:"图片"}})]),t._v(" "),e("h4",{attrs:{id:"last-modified-与-if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-与-if-modified-since"}},[t._v("#")]),t._v(" Last-Modified 与 If-Modified-Since")]),t._v(" "),e("p",[t._v("使用Last-Modified 与 If-Modified-Since来判断是否改变。")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("第一次请求的响应中服务端会在"),e("code",[t._v("response header")]),t._v("中返回资源上次更新时间即Last-Modified")])]),t._v(" "),e("li",[e("p",[t._v("下一次请求中，"),e("code",[t._v("request header")]),t._v("中带上"),e("code",[t._v("if-modified-since:[last-modified]")]),t._v("即上一次的值，并比对浏览器发送的修改时间与服务的的修改时间，一致则未修改，服务端返回正文为空响应；\n不一致则服务端返回最新的响应并带上新的"),e("code",[t._v("last-modified")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("last-modified依赖的是保存的绝对时间，还是会出现误差的情况:")]),t._v(" "),e("ol",[e("li",[t._v("保存的时间是以秒为单位的，1秒内多次修改是无法捕捉到的；")]),t._v(" "),e("li",[t._v("各机器读取到的时间不一致，就有出现误差的可能性。为了改善这个问题，提出了使用etag。")])])]),t._v(" "),e("h4",{attrs:{id:"etag和if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag和if-none-match"}},[t._v("#")]),t._v(" ETag和If-None-Match")]),t._v(" "),e("p",[t._v("ETag 是http提供的一种Web缓存验证机制。一个etag代表当前资源的版本，其内容可以是修改时间的哈希值，跨域是资源的抗碰撞散列函数，甚至可以是版本号。")]),t._v(" "),e("p",[t._v("其验证类似"),e("code",[t._v("last-modified")]),t._v(" ，都是生成与比对：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("浏览器会先发送一个请求得到etag的值")])]),t._v(" "),e("li",[e("p",[t._v("下一次请求在request header中带上if-none-match:[保存的etag的值] 和服务端重新生成的etag的值进行比对")])])]),t._v(" "),e("blockquote",[e("p",[t._v("etag能够解决last-modified的缺点，包括精度，时间局限性。但是etag每次服务端生成都需要进行读写操作，而last-modified只需要读取操作，从这方面来看，etag的消耗是更大的。")])]),t._v(" "),e("p",[t._v("etag常用于服务器校验")]),t._v(" "),e("p",[t._v("局限：考虑多个服务器负载平衡问题时，不要设置Etag属性，因为该属性在每个服务器上不一样")])])}),[],!1,null,null,null);e.default=_.exports}}]);