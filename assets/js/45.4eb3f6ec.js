(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{453:function(a,t,s){"use strict";s.r(t);var r=s(2),h=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"如何理解前后端分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何理解前后端分离"}},[a._v("#")]),a._v(" 如何理解前后端分离")]),a._v(" "),t("p",[a._v("前后端分离顾名思义就是前后端分开开发，分开部署")]),a._v(" "),t("h3",{attrs:{id:"概念与需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念与需求"}},[a._v("#")]),a._v(" 概念与需求")]),a._v(" "),t("p",[a._v("如何理解分开开发：前端只需要专注h5+js+css，后端不需要写jsp，不用顾及渲染。")]),a._v(" "),t("p",[a._v("在项目维护更新中，代码量会越来越大。如果前后端不分离，在更新迭代的时候前后端工程师的沟通成本甚至可能大于代码实现。")]),a._v(" "),t("p",[a._v("另外，当页面或者接口出现问题，因为不分离导致的耦合性过高，要求我们要重新打包编译整个项目进行维护更新，也需要很多时间成本。")]),a._v(" "),t("h3",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[a._v("#")]),a._v(" 优点")]),a._v(" "),t("h4",{attrs:{id:"提高前后端的开发效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提高前后端的开发效率"}},[a._v("#")]),a._v(" 提高前后端的开发效率")]),a._v(" "),t("h4",{attrs:{id:"降低项目更新难度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#降低项目更新难度"}},[a._v("#")]),a._v(" 降低项目更新难度")]),a._v(" "),t("h4",{attrs:{id:"提高接口复用率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提高接口复用率"}},[a._v("#")]),a._v(" 提高接口复用率")]),a._v(" "),t("h4",{attrs:{id:"页面加载速度提升"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页面加载速度提升"}},[a._v("#")]),a._v(" 页面加载速度提升")]),a._v(" "),t("h4",{attrs:{id:"提高服务器资源利用率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提高服务器资源利用率"}},[a._v("#")]),a._v(" 提高服务器资源利用率")]),a._v(" "),t("h3",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[a._v("#")]),a._v(" 缺点")]),a._v(" "),t("h4",{attrs:{id:"跨域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[a._v("#")]),a._v(" 跨域")]),a._v(" "),t("h4",{attrs:{id:"单点登录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单点登录"}},[a._v("#")]),a._v(" 单点登录")])])}),[],!1,null,null,null);t.default=h.exports}}]);